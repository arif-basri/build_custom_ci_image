#!/bin/bash -e

export DEBIAN_FRONTEND=noninteractive

# phpize deps
apt-get update && apt-get install -y \
		autoconf \
		file \
		g++ \
		gcc \
		libc-dev \
		make \
		pkg-config \
		re2c \
	--no-install-recommends && rm -r /var/lib/apt/lists/*

# persistent / runtime deps
apt-get update && apt-get install -y \
		ca-certificates \
		curl \
		libcurl3 \
		libedit2 \
		libsqlite3-0 \
		libxml2 \
	--no-install-recommends && rm -r /var/lib/apt/lists/*

export PHP_INI_DIR=/usr/local/etc/php
mkdir -p $PHP_INI_DIR/conf.d

##<autogenerated>##
apt-get update && apt-get install -y apache2 apache2-utils --no-install-recommends && rm -rf /var/lib/apt/lists/*

rm -rf /var/www/html && mkdir -p /var/lock/apache2 /var/run/apache2 /var/log/apache2 /var/www/html && chown -R www-data:www-data /var/lock/apache2 /var/run/apache2 /var/log/apache2 /var/www/html

# Apache + PHP requires preforking Apache for best results
a2dismod mpm_event && a2enmod mpm_prefork

mv /etc/apache2/apache2.conf /etc/apache2/apache2.conf.dist && rm /etc/apache2/conf-enabled/* /etc/apache2/sites-enabled/*
cp apache2.conf /etc/apache2/apache2.conf
# it'd be nice if we could not COPY apache2.conf until the end of the Dockerfile, but its contents are checked by PHP during compilation

export PHP_EXTRA_BUILD_DEPS=apache2-dev
export PHP_EXTRA_CONFIGURE_ARGS=--with-apxs2
##</autogenerated>##

export GPG_KEYS A917B1ECDA84AEC2B568FED6F50ABC807BD5DCD0=528995BFEDFBA7191D46839EF9BA0ADA31CBD89E

export PHP_VERSION=7.1.11
export PHP_FILENAME=php-7.1.11.tar.xz
export PHP_SHA256=074093e9d7d21afedc5106904218a80a47b854abe368d2728ed22184c884893e
export PHP_URL="https://secure.php.net/get/$PHP_FILENAME/from/this/mirror" 
export PHP_ASC_URL="https://secure.php.net/get/php-7.1.11.tar.xz.asc/from/this/mirror"


set -xe \
	&& buildDeps=" \
		$PHP_EXTRA_BUILD_DEPS \
		libcurl4-openssl-dev \
		libedit-dev \
		libsqlite3-dev \
		libssl-dev \
		libxml2-dev \
		xz-utils \
		wget \
	" \
	&& apt-get update && apt-get install -y $buildDeps --no-install-recommends && rm -rf /var/lib/apt/lists/* \
	&& wget -O php.tar.xz "$PHP_URL" \
	&& echo "$PHP_SHA256 *php.tar.xz" | sha256sum -c - \
	&& wget -O php.tar.xz.asc "$PHP_ASC_URL" \
	&& export GNUPGHOME="$(mktemp -d)" \
	&& for key in $GPG_KEYS; do \
		    gpg --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys "$key"; \
	    done \
	&& gpg --batch --verify php.tar.xz.asc php.tar.xz \
	&& rm -rf "$GNUPGHOME" "$PHP_FILENAME.asc"\
	&& mkdir -p /usr/src/php \
	&& tar -xf "php.tar.xz" -C /usr/src/php --strip-components=1 \
	&& rm "php.tar.xz" \
	&& cd /usr/src/php \
	&& ./configure \
		--with-config-file-path="$PHP_INI_DIR" \
		--with-config-file-scan-dir="$PHP_INI_DIR/conf.d" \
		$PHP_EXTRA_CONFIGURE_ARGS \
		--disable-cgi \
# --enable-mysqlnd is included here because it's harder to compile after the fact than extensions are (since it's a plugin for several extensions, not an extension in itself)
		--enable-mysqlnd \
# --enable-mbstring is included here because otherwise there's no way to get pecl to use it properly (see https://github.com/docker-library/php/issues/195)
		--enable-mbstring \
		--with-curl \
		--with-libedit \
		--with-openssl \
		--with-zlib \
	&& make -j"$(nproc)" \
	&& make install \
	&& { find /usr/local/bin /usr/local/sbin -type f -executable -exec strip --strip-all '{}' + || true; } \
	&& make clean \
	&& apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false -o APT::AutoRemove::SuggestsImportant=false $buildDeps

cp docker-php-ext-* /usr/local/bin/
chmod +x /usr/local/bin/docker-php-ext-*

##<autogenerated>##
cd /var/www/html

# EXPOSE 80

# CMD ["/sbin/my_init"]
./sbin/my_init

apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

mkdir /etc/service/apache2
cp apache2-foreground /etc/service/apache2/run
chmod +x /etc/service/apache2/run



# echo "================ Installing locales ======================="
# apt-get clean && apt-get update
# apt-get install -q locales=2.23*

# dpkg-divert --local --rename --add /sbin/initctl
# locale-gen en_US en_US.UTF-8
# dpkg-reconfigure locales

# echo "HOME=$HOME"
# cd /u16

# echo "================= Updating package lists ==================="
# apt-get update

# echo "================= Adding some global settings ==================="
# mv gbl_env.sh /etc/profile.d/
# mkdir -p "$HOME/.ssh/"
# mv config "$HOME/.ssh/"
# mv 90forceyes /etc/apt/apt.conf.d/
# touch "$HOME/.ssh/known_hosts"
# mkdir -p /etc/drydock

# echo "================= Installing basic packages ==================="
# apt-get install -q -y \
  # build-essential=12.1* \
  # curl=7.47.0* \
  # gcc=4:5.3.1* \
  # gettext=0.19.7* \
  # libxml2-dev=2.9.3* \
  # libxslt1-dev=1.1.28* \
  # make=4.1* \
  # nano=2.5.3* \
  # openssh-client=1:7.2p2* \
  # openssl=1.0.2g* \
  # software-properties-common=0.96.20.7 \
  # sudo=1.8.16*  \
  # texinfo=6.1.0* \
  # zip=3.0* \
  # unzip=6.0-20ubuntu1 \
  # wget=1.17.1* \
  # rsync=3.1.1* \
  # psmisc=22.21* \
  # netcat-openbsd=1.105* \
  # vim=2:7.4.1689* \
  # python-lxml

# echo "================= Installing Python packages ==================="
# apt-get install -q -y \
  # python-pip=8.1.1* \
  # python-software-properties=0.96.20* \
  # python-dev=2.7.12*

# echo "================= Installing Git ==================="
# add-apt-repository ppa:git-core/ppa -y
# apt-get update
# apt-get install -q -y git


# echo "================= Adding JQ 1.5.1 ==================="
# apt-get install -q jq=1.5*

# echo "================= Installing Java 1.8.0 ==================="
# . /u16/java/install.sh

# echo "================ Installing apache-maven-3.5.3 ================="
# wget -nv http://www-us.apache.org/dist/maven/maven-3/3.5.3/binaries/apache-maven-3.5.3-bin.tar.gz
# tar xzf apache-maven-3.5.3-bin.tar.gz -C /usr/local && rm -f apache-maven-3.5.3-bin.tar.gz
# ln -fs /usr/local/apache-maven-3.5.3/bin/mvn /usr/bin
# echo 'export PATH=$PATH:/usr/local/apache-maven-3.5.3/bin' >> /etc/drydock/.env

# echo "================ Adding ansible 2.4.3.0 ===================="
# sudo pip install -q 'ansible==2.4.3.0'

# echo "================ Adding boto 2.48.0 ======================="
# sudo pip install -q 'boto==2.48.0'

# echo "================ Adding boto3 ======================="
# sudo pip install -q 'boto3==1.6.16'

# export PK_VERSION=1.2.2
# echo "================ Adding packer $PK_VERSION  ===================="
# export PK_FILE=packer_"$PK_VERSION"_linux_amd64.zip

# echo "Fetching packer"
# echo "-----------------------------------"
# rm -rf /tmp/packer
# mkdir -p /tmp/packer
# wget -nv https://releases.hashicorp.com/packer/$PK_VERSION/$PK_FILE
# unzip -o $PK_FILE -d /tmp/packer
# sudo chmod +x /tmp/packer/packer
# mv /tmp/packer/packer /usr/bin/packer

# echo "Added packer successfully"
# echo "-----------------------------------"

# echo "================= Adding awscli 1.14.64 ============"
# sudo pip install -q 'awscli==1.14.64'

# echo "================= Intalling Shippable CLIs ================="

# git clone https://github.com/Shippable/node.git nodeRepo
# ./nodeRepo/shipctl/x86_64/Ubuntu_16.04/install.sh
# rm -rf nodeRepo

# echo "Installed Shippable CLIs successfully"
# echo "-------------------------------------"

# echo "================= Cleaning package lists ==================="
# apt-get clean
# apt-get autoclean
# apt-get autoremove
